{"version":3,"sources":["assets/noPosterSmall.png","Components/Header.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","API/api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Header","styled","header","Ul","ul","Li","li","props","selected","Item","Link","withRouter","pathname","location","to","Container","div","Title","span","Grid","Section","title","children","pulseAnimation","keyframes","LoaderPulse","Loader","role","aria-label","Text","color","Error","errorText","Image","img","Rating","ImageContainer","Year","Poster","id","imgUrl","rating","year","isMovie","src","require","default","alt","HomePresenter","nowPlaying","upcoming","popular","isLoading","error","Helmet","length","map","movie","original_title","poster_path","vote_average","release_date","String","split","Message","prototype","PropTypes","array","bool","isRequired","string","api","axios","create","baseURL","params","api_key","language","tvAPI","get","append_to_response","term","query","encodeURIComponent","moviesAPI","HomeContainer","state","a","data","results","this","setState","Component","Form","form","Input","input","SearchPresenter","movieResults","tvResults","handleSubmit","updateSearchTerm","searchTerm","onSubmit","placeholder","value","onChange","show","original_name","first_air_date","SearchContainer","event","preventDefault","searchByTerm","target","TVPresenter","topRated","airingToday","TVContainer","BackdropImg","bgUrl","Content","PosterImg","Details","h1","SubDetails","Genres","RunTime","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","name","overview","DetailContainer","console","log","match","push","history","parseInt","Number","parsedId","isNaN","includes","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","GlobalStyles","Router","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84864190.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(20, 20, 20);\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n  z-index: 1;\r\n`;\r\n\r\nconst Ul = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Li = styled.li`\r\n  width: 70px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${(props) => (props.selected ? \"red\" : \"transparent\")};\r\n  transition: border-bottom 0.3s ease-in-out;\r\n`;\r\n\r\nconst Item = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default withRouter(({ location: { pathname } }) => {\r\n  return (\r\n    <Header>\r\n      <Ul>\r\n        <Li selected={pathname === \"/\"}>\r\n          <Item to=\"/\">Movies</Item>\r\n        </Li>\r\n        <Li selected={pathname === \"/tv\"}>\r\n          <Item to=\"/tv\">TV</Item>\r\n        </Li>\r\n        <Li selected={pathname === \"/search\"}>\r\n          <Item to=\"/search\">Search</Item>\r\n        </Li>\r\n      </Ul>\r\n    </Header>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 30px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 120px);\r\n  grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst pulseAnimation = keyframes`\r\nfrom{\r\n  box-shadow: rgba(255,0,0) 0 0 0 0;\r\n}\r\nto{\r\n  box-shadow: rgba(255,0,0,0) 0 0 0 20px;\r\n}\r\n`;\r\n\r\nconst LoaderPulse = styled.div`\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  background-color: red;\r\n  animation: ${pulseAnimation} 1s infinite;\r\n  margin-top: 30px;\r\n`;\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Container>\r\n      <LoaderPulse role=\"img\" aria-label=\"Loading\" />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 30px;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${(props) => props.color};\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Error = ({ errorText, color }) => (\r\n  <Container>\r\n    <Text color={color}>{errorText}</Text>\r\n  </Container>\r\n);\r\n\r\nError.propTypes = {\r\n  errorText: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Error;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  width: 120px;\r\n  height: 180px;\r\n  border-radius: 5px;\r\n  transition: opacity 0.2s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  right: 8px;\r\n  opacity: 0;\r\n  transition: opacity 0.2s linear;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  margin-bottom: 5px;\r\n  position: relative;\r\n  &:hover {\r\n    ${Image} {\r\n      opacity: 0.4;\r\n    }\r\n    ${Rating} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  display: block;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imgUrl, title, rating, year, isMovie = false }) => (\r\n  <Link to={isMovie ? `/movie/detail/${id}` : `/tv/detail/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image\r\n          src={\r\n            imgUrl\r\n              ? `http://image.tmdb.org/t/p/w300${imgUrl}`\r\n              : require(\"../assets/noPosterSmall.png\").default\r\n          }\r\n          alt={title}\r\n        />\r\n        <Rating>\r\n          <span role=\"img\" aria-label=\"rating\">\r\n            ⭐\r\n          </span>\r\n          {rating}/10\r\n        </Rating>\r\n      </ImageContainer>\r\n      <Title>{title}</Title>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  imgUrl: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n  year: PropTypes.string,\r\n  isMovie: PropTypes.bool,\r\n};\r\n\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst HomePresenter = ({ nowPlaying, upcoming, popular, isLoading, error }) =>\r\n  isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>Movies | Chwatcha</title>\r\n      </Helmet>\r\n      {upcoming && upcoming.length > 0 && (\r\n        <Section title=\"Upcoming Movies\">\r\n          {upcoming.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              title={movie.original_title}\r\n              imgUrl={movie.poster_path}\r\n              isMovie={true}\r\n              rating={movie.vote_average}\r\n              year={\r\n                movie.release_date\r\n                  ? String(movie.release_date.split(\"-\")[0])\r\n                  : \"\"\r\n              }\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {nowPlaying && nowPlaying.length > 0 && (\r\n        <Section title=\"Now Paying\">\r\n          {nowPlaying.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              title={movie.original_title}\r\n              imgUrl={movie.poster_path}\r\n              isMovie={true}\r\n              rating={movie.vote_average}\r\n              year={\r\n                movie.release_date\r\n                  ? String(movie.release_date.split(\"-\")[0])\r\n                  : \"\"\r\n              }\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {popular && popular.length > 0 && (\r\n        <Section title=\"Popular Movies\">\r\n          {popular.map((movie) => (\r\n            <Poster\r\n              key={movie.id}\r\n              id={movie.id}\r\n              title={movie.original_title}\r\n              imgUrl={movie.poster_path}\r\n              isMovie={true}\r\n              rating={movie.vote_average}\r\n              year={\r\n                movie.release_date\r\n                  ? String(movie.release_date.split(\"-\")[0])\r\n                  : \"\"\r\n              }\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {error && <Message errorText={error} />}\r\n    </Container>\r\n  );\r\n\r\nHomePresenter.prototype = {\r\n  nowPlaying: PropTypes.array,\r\n  upcoming: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default HomePresenter;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: {\r\n    api_key: \"e2e6c3ca4cf91520519a76115662cf35\",\r\n    language: \"en-US\",\r\n  },\r\n});\r\n\r\nexport const tvAPI = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  tvDetail: (id) =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term),\r\n      },\r\n    }),\r\n};\r\n\r\nexport const moviesAPI = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: (id) =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term),\r\n      },\r\n    }),\r\n};\r\n","import HomeContainer from \"./HomeContainer\"\r\n\r\nexport default HomeContainer;","import React, { Component } from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesAPI } from \"API/api\";\r\n\r\nclass HomeContainer extends Component {\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    isLoading: true,\r\n    error: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesAPI.nowPlaying();\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesAPI.upcoming();\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesAPI.popular();\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular,\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find Movies information\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        isLoading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, isLoading, error } = this.state;\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        isLoading={isLoading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 24px;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  handleSubmit,\r\n  updateSearchTerm,\r\n  searchTerm,\r\n  isLoading,\r\n  error,\r\n}) => (\r\n  <Container>\r\n    <Helmet>\r\n      <title>Search | Chwatcha</title>\r\n    </Helmet>\r\n    <Form onSubmit={handleSubmit}>\r\n      <Input\r\n        placeholder=\"Search anything...\"\r\n        value={searchTerm}\r\n        onChange={updateSearchTerm}\r\n      ></Input>\r\n    </Form>\r\n    {isLoading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imgUrl={movie.poster_path}\r\n                isMovie={true}\r\n                rating={movie.vote_average}\r\n                year={\r\n                  movie.release_date\r\n                    ? String(movie.release_date.split(\"-\")[0])\r\n                    : \"\"\r\n                }\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV Show Results\">\r\n            {tvResults.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imgUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={\r\n                  show.first_air_date\r\n                    ? String(show.first_air_date.split(\"-\")[0])\r\n                    : \"\"\r\n                }\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message errorText={error} color={\"red\"} />}\r\n        {tvResults &&\r\n          movieResults &&\r\n          tvResults.length === 0 &&\r\n          movieResults.length === 0 && (\r\n            <Message errorText={\"Nothing Found\"} color={\"red\"} />\r\n          )}\r\n      </>\r\n    )}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateSearchTerm: PropTypes.func.isRequired,\r\n  searchTerm: PropTypes.string,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n","import React, { Component } from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesAPI, tvAPI } from \"API/api\";\r\n\r\nclass SearchContainer extends Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    isLoading: false,\r\n    error: null,\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    // 새로고침 되면 state를 잃어버리기 때문에 submit의 기본 기능을 prevent\r\n    event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm(searchTerm);\r\n    }\r\n  };\r\n\r\n  updateSearchTerm = (event) => {\r\n    // 검색창에 입력할 때마다 state를 업데이트\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    this.setState({ searchTerm: value });\r\n  };\r\n\r\n  // 검색어를 가지고 api를 통해 검색한 결과로 state 업데이트\r\n  searchByTerm = async (searchTerm) => {\r\n    this.setState({ isLoading: true });\r\n    try {\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesAPI.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvAPI.search(searchTerm);\r\n      this.setState({ movieResults, tvResults });\r\n    } catch {\r\n      this.setState({ error: \"search failed\" });\r\n    } finally {\r\n      this.setState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, isLoading, error } =\r\n      this.state;\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        isLoading={isLoading}\r\n        error={error}\r\n        handleSubmit={this.handleSubmit}\r\n        updateSearchTerm={this.updateSearchTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\nimport Helmet from \"react-helmet\"\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, airingToday, popular, isLoading, error }) =>\r\n  isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>TV Shows | Chwatcha</title>\r\n      </Helmet>\r\n      {topRated && topRated.length > 0 && (\r\n        <Section title={\"Top Rated TV Shows\"}>\r\n          {topRated.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.original_name}\r\n              imgUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={\r\n                show.first_air_date\r\n                  ? String(show.first_air_date.split(\"-\")[0])\r\n                  : \"\"\r\n              }\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {airingToday && airingToday.length > 0 && (\r\n        <Section title={\"Airing Today\"}>\r\n          {airingToday.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.original_name}\r\n              imgUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={\r\n                show.first_air_date\r\n                  ? String(show.first_air_date.split(\"-\")[0])\r\n                  : \"\"\r\n              }\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {popular && popular.length > 0 && (\r\n        <Section title={\"Popular TV Shows\"}>\r\n          {popular.map((show) => (\r\n            <Poster\r\n              key={show.id}\r\n              id={show.id}\r\n              title={show.original_name}\r\n              imgUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              year={\r\n                show.first_air_date\r\n                  ? String(show.first_air_date.split(\"-\")[0])\r\n                  : \"\"\r\n              }\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {error && <Message errorText={error} />}\r\n    </Container>\r\n  );\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;","import React, { Component } from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvAPI } from \"../../API/api\";\r\n\r\nclass TVContainer extends Component {\r\n  state = {\r\n    topRated: null,\r\n    airingToday: null,\r\n    popular: null,\r\n    isLoading: true,\r\n    error: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvAPI.topRated();\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvAPI.airingToday();\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvAPI.popular();\r\n      this.setState({\r\n        topRated,\r\n        airingToday,\r\n        popular,\r\n      });\r\n    } catch {\r\n      this.setState({ error: \"Can't find TV information\" });\r\n    } finally {\r\n      this.setState({ isLoading: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { topRated, airingToday, popular, isLoading, error } = this.state;\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        airingToday={airingToday}\r\n        popular={popular}\r\n        isLoading={isLoading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  padding: 20px;\r\n  position: relative;\r\n`;\r\n\r\nconst BackdropImg = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${(props) => props.bgUrl});\r\n  background-size: cover;\r\n  background-position: center center;\r\n  filter: blur(6px);\r\n  opacity: 0.3;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  height: 100%;\r\n  display: flex;\r\n  margin: auto;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst PosterImg = styled.img`\r\n  width: 200px;\r\n  height: 300px;\r\n  object-fit: cover;\r\n`;\r\n\r\nconst Details = styled.div`\r\n  width: 200px;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 36px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\nconst SubDetails = styled.div``;\r\n\r\nconst Year = styled.span`\r\n  color: white;\r\n  opacity: 0.6;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst Genres = styled.div`\r\n  margin-top: 5px;\r\n  span {\r\n    display: inline-block;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n    color: rgba(255, 255, 255, 0.6);\r\n    padding: 5px 10px;\r\n    margin-bottom: 4px;\r\n    border-radius: 10px;\r\n  }\r\n  span:not(last-child) {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nconst RunTime = styled.span`\r\n  color: white;\r\n  opacity: 0.6;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  line-height: 1.3;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, isLoading, error }) =>\r\n  isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {result.original_title ? result.original_title : result.original_name}{\" \"}\r\n          | Chwatcha\r\n        </title>\r\n      </Helmet>\r\n      <BackdropImg\r\n        bgUrl={`http://image.tmdb.org/t/p/original${result.backdrop_path}`}\r\n      />\r\n      <Content>\r\n        <PosterImg\r\n          src={\r\n            result.poster_path\r\n              ? `http://image.tmdb.org/t/p/w500${result.poster_path}`\r\n              : require(\"../../assets/noPosterSmall.png\")\r\n          }\r\n          alt={result.title}\r\n        />\r\n        <Details>\r\n          <Title>\r\n            {result.original_title\r\n              ? result.original_title\r\n              : result.original_name}\r\n          </Title>\r\n          <SubDetails>\r\n            <Year>\r\n              {result.release_date\r\n                ? result.release_date.split(\"-\")[0]\r\n                : result.first_air_date.split(\"-\")[0]}\r\n            </Year>\r\n            <RunTime>\r\n              {result.runtime ? result.runtime : result.episode_run_time}min\r\n            </RunTime>\r\n            <Genres>\r\n              {result.genres\r\n                ? result.genres.map((genre) => (\r\n                    <span key={genre.id}>{genre.name}</span>\r\n                  ))\r\n                : \"\"}\r\n            </Genres>\r\n          </SubDetails>\r\n          <Overview>\r\n            {result.overview ? result.overview : \"No Overview\"}\r\n          </Overview>\r\n        </Details>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import { moviesAPI, tvAPI } from \"API/api\";\r\nimport React, { Component } from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nclass DetailContainer extends Component {\r\n  state = {\r\n    result: null,\r\n    isLoading: true,\r\n    error: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    // Router가 보내준 props에서 id와\r\n    // 특정 페이지로 보내주는 push 확인 가능\r\n    console.log(\"Router가 보내준 props: \", this.props);\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n      location: { pathname },\r\n    } = this.props;\r\n    // 문자열인 id를 숫자로 변환시켜보고\r\n    // 숫자가 맞는지 문자열이 섞이진 않았는지 확인\r\n    // parseInt는 섞인 걸 구별 못하므로 Number 사용\r\n    console.log(\"parseInt\", parseInt(\"123asdf1234\"));\r\n    console.log(\"Number\", Number(\"1234asdf1324\"));\r\n    const parsedId = Number(id);\r\n    if (isNaN(parsedId)) {\r\n      // parsedId가 NaN이라면 push(\"/\")로 첫페이지로 보냄\r\n      return push(\"/\");\r\n    }\r\n    // pathname에 \"/movie/\"가 포함되어있는지 확인해서 변수 isMovie에 불리언 값을 할당\r\n    const isMovie = pathname.includes(\"/movie/\");\r\n    try {\r\n      if (isMovie) {\r\n        // 결과의 data를 result라는 alias에 할당\r\n        const { data: result } = await moviesAPI.movieDetail(id);\r\n        this.setState({ result });\r\n      } else {\r\n        // isMovie가 false라면 TV라는 뜻\r\n        const { data: result } = await tvAPI.tvDetail(id);\r\n        this.setState({ result });\r\n      }\r\n    } catch {\r\n      this.setState({\r\n        error: \"detail failed\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        isLoading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, isLoading, error } = this.state;\r\n    return (\r\n      <DetailPresenter result={result} isLoading={isLoading} error={error} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport Header from \"Components/Header\";\r\nimport Home from \"Routes/Home\";\r\nimport Search from \"Routes/Search\";\r\nimport TV from \"Routes/TV\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default () => (\r\n  <Router>\r\n    <Header />\r\n    <Switch>\r\n      <Route path=\"/\" exact component={Home} />\r\n      <Route path=\"/tv\" exact component={TV} />\r\n      <Route path=\"/search\" component={Search} />\r\n      <Route path=\"/movie/detail/:id\" component={Detail} />\r\n      <Route path=\"/tv/detail/:id\" component={Detail} />\r\n      <Redirect from=\"*\" to=\"/\" />\r\n    </Switch>\r\n  </Router>\r\n);\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n  ${reset};\r\n  *{\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  body{\r\n    font-size: 14px;\r\n    background-color: rgba(20,20,20,1);\r\n    color: white;\r\n    padding-top: 50px;\r\n  }\r\n  a{\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n`;\r\n\r\nexport default globalStyles;\r\n","import Router from \"Components/Router\";\nimport GlobalStyles from \"./GlobalStyles\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles />\n      <Router />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}